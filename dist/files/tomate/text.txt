En tu implementación del servidor, las peticiones del cliente se manejan dentro del bucle `while(42)` que contiene la llamada a `poll`. Aquí te explico cómo se controlan las peticiones del cliente y los envíos del servidor en diferentes etapas del ciclo de vida de la conexión:

1. **Inicio de una conexión:**
   - Cuando un cliente se conecta al servidor, se acepta la conexión entrante utilizando `accept(sockfd, ...)`.
   - Después de aceptar la conexión, el servidor recibe los datos enviados por el cliente utilizando `recv(newsockfd, ...)`.
   - Una vez que se han recibido los datos, el servidor procesa la solicitud HTTP del cliente, extrae la información relevante de la solicitud y prepara una respuesta adecuada.

2. **Procesamiento de la solicitud del cliente:**
   - El servidor parsea la solicitud HTTP recibida del cliente para obtener información sobre el método, la ruta, los encabezados, etc.
   - Basado en la solicitud recibida, el servidor decide qué acción tomará, como servir un archivo, procesar datos de un formulario, eliminar un recurso, etc.
   - Durante este proceso de procesamiento de la solicitud, el servidor puede realizar diversas operaciones según sea necesario, como leer archivos del sistema de archivos, interactuar con bases de datos, procesar datos de formularios, etc.

3. **Envío de la respuesta al cliente:**
   - Después de procesar la solicitud, el servidor construye una respuesta HTTP adecuada que incluye un encabezado y, opcionalmente, un cuerpo.
   - La respuesta se envía al cliente utilizando `send` o `write` en el socket `newsockfd`.
   - Dependiendo del método HTTP y de la acción tomada por el servidor, la respuesta puede incluir diferentes encabezados y contenido.

4. **Cierre de la conexión:**
   - Una vez que se ha enviado la respuesta al cliente, el servidor cierra el socket de la conexión actual utilizando `close(newsockfd)`.
   - Con el cierre del socket, se libera cualquier recurso asociado con la conexión, y la conexión se da por terminada.

Este ciclo de vida se repite continuamente en el bucle principal `while(42)`, lo que permite al servidor manejar múltiples conexiones de clientes de forma concurrente. Cada conexión se maneja de manera independiente, permitiendo que el servidor atienda solicitudes de múltiples clientes simultáneamente.
